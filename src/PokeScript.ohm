PokeScript {
  Program         = Statement+

  Statement       = PrintStmt
                  | VarDecl
                  | FunDecl
                  | Assign
                  | LoopStmt
                  | IfStmt
                  | Return
                  | break
                  | Call
                  | ClassDecl
                  | Member

  PrintStmt       = print Exp

  VarDecl         = (let | const | Type) id "=" Exp

  FunDecl         = function id Params ("->" Type)? Block
  
  Params          = "(" ListOf<Param, ","> ")"
  Param           = Type id

  Assign          = Exp5 "=" Exp

  Return          = return Exp                                                   --exp
                  | return                                                       --short

  LoopStmt        = while Exp Block                                              --while
                  | for (Type|let) id "in" Exp Block                             --ForEach
                  | for (let|"pokedollar") id "=" Exp "until" Exp Block          --For
  IfStmt          = if Exp Block else Block                                      --long
                  | if Exp Block else IfStmt                                     --elsif
                  | if Exp Block                                                 --short

  Block           = "{" Statement* "}"

  ClassDecl       = class id "{" ConstructorDecl MethodDecl* "}"

  ConstructorDecl = construct Params "{" Field* "}"

  Field       	  =  Type this "." id "=" Exp

  MethodDecl      = function id Params ("->" Type)? Block

  Exp             = Exp0 "?" Exp0 ":" Exp                                        --ternary
                  | Exp0
  Exp0            = Exp1 ("||" Exp1)+                                            --or
                  | Exp1 ("&&" Exp1)+                                            --and
                  | Exp1
  Exp1            = Exp2 ("<="|"<"|"=="|"!="|">="|">") Exp2                      --binary
                  | Exp2
  Exp2            = Exp2 ("+"|"-") Exp3                                          --binary
                  | Exp3
  Exp3            = Exp3 ("*"|"/"|"%") Exp3                                      --binary
                  | Exp4
  Exp4            = Exp5 "**" Exp4                                               --binary
                  | ("-"|"!") Exp5                                               --unary
                  | Exp5
  Exp5            =
                  | true ~mut
                  | false ~mut
                  | floatlit ~mut
                  | intlit ~mut
                  | Call ~mut
                  | Exp5 "[" Exp "]"                                             --subscript
                  | Member
                  | ObjectDec
                  | strlit ~mut
                  | id                                                           --id
                  | ArrayLit ~mut
                  | MapLit ~mut
                  | "(" Exp ")" ~mut                                             --parens


  Type            = "[" Type "]"                                                 --array
                  | "{" Type "," Type "}"                                        --map
                  | "(" ListOf<Type, ","> ")" "->" Type                          --function
                  | id                                                           --id

  intlit          = digit+
  floatlit        = digit+ "." digit+ (("E" | "e") ("+" | "-")? digit+)?

  strlit          = "\"" char* "\""
  char            = ~"\\" ~"\"" ~"\n" ~"~" any

  ArrayLit        = "[" ListOf<Exp, ","> "]"

  MapLit          = "{" ListOf<MapEntry, ","> "}"
  MapEntry        = Exp5 ":" Exp

  Member          = Exp5 "." id

  Call            = Exp5 "(" ListOf<Exp, ","> ")"

  mut             = ~"==" "="

  let             = "poke" ~idchar
  const           = "const" ~idchar
  print           = "pika" ~idchar
  function        = "ability" ~idchar
  if              = "catch" ~idchar
  else            = "release" ~idchar
  while           = "while" ~idchar
  for             = "evolve" ~idchar
  return          = "return" ~idchar
  true            = "success" ~idchar
  false           = "fail" ~idchar
  class           = "train" ~idchar
  break           = "retreat" ~idchar
  this            = "this" ~idchar
  construct       = "starter" ~idchar
  and             = "and" ~idchar
  or              = "or" ~idchar
  new             = "new" ~idchar

  keyword         = let | const | print | function | else | if | while | for 
                  | break | return | true | false | this | construct | class | new
  id              = ~keyword letter idchar*
  idchar          = letter | digit | "_"
  ObjectDec       = new id "(" ListOf<Exp, ","> ")"

  space           += "ϞϞ(๑⚈ ․̫ ⚈๑)∩" (~"\n" any)* ("\n" | end)                  --comment

}