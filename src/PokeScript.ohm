PokeScript {
  Program      = Statement+

  Statement    = PrintStmt
               | VarDecl
               | FunDecl
               | Assign
               | LoopStmt
               | IfStmt
               | Return
               | break          
               | Call
               | ClassDec
               | Member
               | DotCall

  PrintStmt      = print Exp

  VarDecl        = (let | const | Type) id "=" Exp

  FunDecl        = function id Params ("->" Type)? Block
  
  Params      	 = "(" ListOf<Param, ","> ")"
  Param        	 = Type id

  Assign   		 = Exp5 "=" Exp                  				 --regular

  Return      	 = return Exp 									 --exp
              	 | return          								 --short     
  
  LoopStmt    	 = while Exp Block 				     		  	 --while
              	 | for (Type|let) id "in" id Block           	 --ForEach
              	 | for (let|"int") id "=" Exp "until" Exp Block  --For
  IfStmt      	 = if Exp Block else Block                       --long
              	 | if Exp Block else IfStmt                      --elsif
               	 | if Exp Block                                  --short
              
  Block        	 = "{" Statement* "}"
  
  Field       	 =  Type this "." id "=" Exp   
  
  Exp     = Exp0 "?" Exp0 ":" Exp                           --ternary
          | Exp0
  Exp0    = Exp1 ("||" Exp1)+                               --binary
          | Exp1 ("&&" Exp1)+                               --binary
          | Exp1
  Exp1    = Exp2 ("<="|"<"|"=="|"!="|">="|">") Exp2         --binary
          | Exp2
  Exp2    = Exp2 ("+"|"-") Exp3                             --binary
          | Exp3
  Exp3    = Exp3 ("*"|"/"|"%") Exp3                         --binary
          | Exp4
  Exp4    = Exp5 "**" Exp4                                  --binary
          | ("-"|"!") Exp5                                  --unary
          | Exp5
  Exp5    = 
    	  | true
          | false
          | floatlit
          | intlit  
          | Call    
          | Exp5 "[" Exp "]"			--subscript
          | Member
          | DotCall
          | strlit  
          | id
          | ArrayLit
          | MapLit
          | "(" Exp ")"                 --parens


  Type 	  = "[" Type "]"				         --array
  		  | "{" Type "," Type "}" 		         --dictionary
          | "(" ListOf<Type, ","> ")" "->" Type  --function
  		  | id							         --id

  intlit       	 = digit+
  floatlit     	 = digit+ "." digit+ (("E" | "e") ("+" | "-")? digit+)?

  /*strlit    	 = ("\"" | "\'") char* ("~" applySyntactic<Exp> "~" char*)* ("\"" | "\'")*/
  strlit      	 = "\"" char* "\""
  char        	 = ~"\\" ~"\"" ~"\n" ~"~" any
  
  ArrayLit       = "[" ListOf<Exp, ","> "]"
  
  MapLit         = "{" ListOf<MapEntry, ","> "}"
  MapEntry       = Exp5 ":" Exp

  Member         = this "." id
  DotCall  		 = id "." Call 

  Call       	 = id "(" ListOf<Exp, ","> ")"  --regular

  let         = "poke" ~idchar
  const		  = "const" ~idchar
  print       = "pika" ~idchar
  function    = "pokeball" ~idchar
  if          = "catch" ~idchar
  else        = "release" ~idchar
  while       = "train" ~idchar
  for         = "evolve" ~idchar
  return      = "return" ~idchar
  true        = "success" ~idchar
  false       = "fail" ~idchar
  break       = "retreat" ~idchar
  this        = "this" ~idchar
  and         = "and" ~idchar
  or          = "or" ~idchar
  new         = "new" ~idchar
  
  keyword     = let | const | print | function | else | if | while 
              | for | break | return | true | false | this | new                
  num         = digit+
  id          = ~keyword letter idchar*
  idchar      = letter | digit | "_"
              
  space      += "ϞϞ(๑⚈ ․̫ ⚈๑)∩" (~"\n" any)* ("\n" | end)                --comment
 
} 
